#ifndef KNERON_NEF_READER_H
#define KNERON_NEF_READER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#undef flatbuffers_extension
#define flatbuffers_extension ".nef"


typedef const struct Kneron_SchemaVersion_table *Kneron_SchemaVersion_table_t;
typedef struct Kneron_SchemaVersion_table *Kneron_SchemaVersion_mutable_table_t;
typedef const flatbuffers_uoffset_t *Kneron_SchemaVersion_vec_t;
typedef flatbuffers_uoffset_t *Kneron_SchemaVersion_mutable_vec_t;
typedef const struct Kneron_ModelBin_table *Kneron_ModelBin_table_t;
typedef struct Kneron_ModelBin_table *Kneron_ModelBin_mutable_table_t;
typedef const flatbuffers_uoffset_t *Kneron_ModelBin_vec_t;
typedef flatbuffers_uoffset_t *Kneron_ModelBin_mutable_vec_t;
typedef const struct Kneron_ModelInfo_table *Kneron_ModelInfo_table_t;
typedef struct Kneron_ModelInfo_table *Kneron_ModelInfo_mutable_table_t;
typedef const flatbuffers_uoffset_t *Kneron_ModelInfo_vec_t;
typedef flatbuffers_uoffset_t *Kneron_ModelInfo_mutable_vec_t;
typedef const struct Kneron_NEFHeader_table *Kneron_NEFHeader_table_t;
typedef struct Kneron_NEFHeader_table *Kneron_NEFHeader_mutable_table_t;
typedef const flatbuffers_uoffset_t *Kneron_NEFHeader_vec_t;
typedef flatbuffers_uoffset_t *Kneron_NEFHeader_mutable_vec_t;
typedef const struct Kneron_NEFContent_table *Kneron_NEFContent_table_t;
typedef struct Kneron_NEFContent_table *Kneron_NEFContent_mutable_table_t;
typedef const flatbuffers_uoffset_t *Kneron_NEFContent_vec_t;
typedef flatbuffers_uoffset_t *Kneron_NEFContent_mutable_vec_t;
#ifndef Kneron_SchemaVersion_identifier
#define Kneron_SchemaVersion_identifier flatbuffers_identifier
#endif
#define Kneron_SchemaVersion_type_hash ((flatbuffers_thash_t)0x1bdc905d)
#define Kneron_SchemaVersion_type_identifier "\x5d\x90\xdc\x1b"
#ifndef Kneron_ModelBin_identifier
#define Kneron_ModelBin_identifier flatbuffers_identifier
#endif
#define Kneron_ModelBin_type_hash ((flatbuffers_thash_t)0x49e24fae)
#define Kneron_ModelBin_type_identifier "\xae\x4f\xe2\x49"
#ifndef Kneron_ModelInfo_identifier
#define Kneron_ModelInfo_identifier flatbuffers_identifier
#endif
#define Kneron_ModelInfo_type_hash ((flatbuffers_thash_t)0xb7d922d5)
#define Kneron_ModelInfo_type_identifier "\xd5\x22\xd9\xb7"
#ifndef Kneron_NEFHeader_identifier
#define Kneron_NEFHeader_identifier flatbuffers_identifier
#endif
#define Kneron_NEFHeader_type_hash ((flatbuffers_thash_t)0xfe673c7c)
#define Kneron_NEFHeader_type_identifier "\x7c\x3c\x67\xfe"
#ifndef Kneron_NEFContent_identifier
#define Kneron_NEFContent_identifier flatbuffers_identifier
#endif
#define Kneron_NEFContent_type_hash ((flatbuffers_thash_t)0x2276f3ce)
#define Kneron_NEFContent_type_identifier "\xce\xf3\x76\x22"

/** ************************************************************************************************************
 * *   Release Note
 * *   v1.0.0 (2022 10/24)
 * *       1.Remove default value of SchemaVersion
 * *       2.align start address of all_models.bin to 32byte address
 * *
 * ************************************************************************************************************* */
typedef int32_t Kneron_NPUTarget_enum_t;
__flatbuffers_define_integer_type(Kneron_NPUTarget, Kneron_NPUTarget_enum_t, 32)
#define Kneron_NPUTarget_KL520 ((Kneron_NPUTarget_enum_t)INT32_C(0))
#define Kneron_NPUTarget_KL720 ((Kneron_NPUTarget_enum_t)INT32_C(1))
#define Kneron_NPUTarget_KL530 ((Kneron_NPUTarget_enum_t)INT32_C(2))
#define Kneron_NPUTarget_KL730 ((Kneron_NPUTarget_enum_t)INT32_C(3))
#define Kneron_NPUTarget_KL630 ((Kneron_NPUTarget_enum_t)INT32_C(4))
#define Kneron_NPUTarget_KL540 ((Kneron_NPUTarget_enum_t)INT32_C(5))

static inline const char *Kneron_NPUTarget_name(Kneron_NPUTarget_enum_t value)
{
    switch (value) {
    case Kneron_NPUTarget_KL520: return "KL520";
    case Kneron_NPUTarget_KL720: return "KL720";
    case Kneron_NPUTarget_KL530: return "KL530";
    case Kneron_NPUTarget_KL730: return "KL730";
    case Kneron_NPUTarget_KL630: return "KL630";
    case Kneron_NPUTarget_KL540: return "KL540";
    default: return "";
    }
}

static inline int Kneron_NPUTarget_is_known_value(Kneron_NPUTarget_enum_t value)
{
    switch (value) {
    case Kneron_NPUTarget_KL520: return 1;
    case Kneron_NPUTarget_KL720: return 1;
    case Kneron_NPUTarget_KL530: return 1;
    case Kneron_NPUTarget_KL730: return 1;
    case Kneron_NPUTarget_KL630: return 1;
    case Kneron_NPUTarget_KL540: return 1;
    default: return 0;
    }
}

typedef int32_t Kneron_ENCMode_enum_t;
__flatbuffers_define_integer_type(Kneron_ENCMode, Kneron_ENCMode_enum_t, 32)
#define Kneron_ENCMode_EM_None ((Kneron_ENCMode_enum_t)INT32_C(0))
#define Kneron_ENCMode_EM_CUSTOM ((Kneron_ENCMode_enum_t)INT32_C(1))
#define Kneron_ENCMode_EM_KNNum ((Kneron_ENCMode_enum_t)INT32_C(2))

static inline const char *Kneron_ENCMode_name(Kneron_ENCMode_enum_t value)
{
    switch (value) {
    case Kneron_ENCMode_EM_None: return "EM_None";
    case Kneron_ENCMode_EM_CUSTOM: return "EM_CUSTOM";
    case Kneron_ENCMode_EM_KNNum: return "EM_KNNum";
    default: return "";
    }
}

static inline int Kneron_ENCMode_is_known_value(Kneron_ENCMode_enum_t value)
{
    switch (value) {
    case Kneron_ENCMode_EM_None: return 1;
    case Kneron_ENCMode_EM_CUSTOM: return 1;
    case Kneron_ENCMode_EM_KNNum: return 1;
    default: return 0;
    }
}



struct Kneron_SchemaVersion_table { uint8_t unused__; };

static inline size_t Kneron_SchemaVersion_vec_len(Kneron_SchemaVersion_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Kneron_SchemaVersion_table_t Kneron_SchemaVersion_vec_at(Kneron_SchemaVersion_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Kneron_SchemaVersion_table_t, vec, i, 0)
__flatbuffers_table_as_root(Kneron_SchemaVersion)

__flatbuffers_define_scalar_field(0, Kneron_SchemaVersion, major_num, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(1, Kneron_SchemaVersion, minor_num, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(2, Kneron_SchemaVersion, revision_num, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct Kneron_ModelBin_table { uint8_t unused__; };

static inline size_t Kneron_ModelBin_vec_len(Kneron_ModelBin_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Kneron_ModelBin_table_t Kneron_ModelBin_vec_at(Kneron_ModelBin_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Kneron_ModelBin_table_t, vec, i, 0)
__flatbuffers_table_as_root(Kneron_ModelBin)

__flatbuffers_define_vector_field(0, Kneron_ModelBin, fw_info, flatbuffers_uint8_vec_t, 0)
__flatbuffers_define_vector_field(1, Kneron_ModelBin, all_models, flatbuffers_uint8_vec_t, 0)

struct Kneron_ModelInfo_table { uint8_t unused__; };

static inline size_t Kneron_ModelInfo_vec_len(Kneron_ModelInfo_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Kneron_ModelInfo_table_t Kneron_ModelInfo_vec_at(Kneron_ModelInfo_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Kneron_ModelInfo_table_t, vec, i, 0)
__flatbuffers_table_as_root(Kneron_ModelInfo)

__flatbuffers_define_string_field(0, Kneron_ModelInfo, name, 0)
__flatbuffers_define_scalar_field(1, Kneron_ModelInfo, id, flatbuffers_int32, int32_t, INT32_C(0))
__flatbuffers_define_string_field(2, Kneron_ModelInfo, version, 0)

struct Kneron_NEFHeader_table { uint8_t unused__; };

static inline size_t Kneron_NEFHeader_vec_len(Kneron_NEFHeader_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Kneron_NEFHeader_table_t Kneron_NEFHeader_vec_at(Kneron_NEFHeader_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Kneron_NEFHeader_table_t, vec, i, 0)
__flatbuffers_table_as_root(Kneron_NEFHeader)

__flatbuffers_define_string_field(0, Kneron_NEFHeader, platform, 0)
__flatbuffers_define_scalar_field(1, Kneron_NEFHeader, target, Kneron_NPUTarget, Kneron_NPUTarget_enum_t, INT32_C(0))
__flatbuffers_define_scalar_field(2, Kneron_NEFHeader, crc, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(3, Kneron_NEFHeader, kn_number, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_scalar_field(4, Kneron_NEFHeader, encryption_mode, Kneron_ENCMode, Kneron_ENCMode_enum_t, INT32_C(0))
__flatbuffers_define_string_field(5, Kneron_NEFHeader, compiler_version, 0)
__flatbuffers_define_string_field(6, Kneron_NEFHeader, toolchain_version, 0)
__flatbuffers_define_table_field(7, Kneron_NEFHeader, schema_version, Kneron_SchemaVersion_table_t, 0)
__flatbuffers_define_scalar_field(8, Kneron_NEFHeader, uuid, flatbuffers_uint32, uint32_t, UINT32_C(0))

struct Kneron_NEFContent_table { uint8_t unused__; };

static inline size_t Kneron_NEFContent_vec_len(Kneron_NEFContent_vec_t vec)
__flatbuffers_vec_len(vec)
static inline Kneron_NEFContent_table_t Kneron_NEFContent_vec_at(Kneron_NEFContent_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(Kneron_NEFContent_table_t, vec, i, 0)
__flatbuffers_table_as_root(Kneron_NEFContent)

__flatbuffers_define_scalar_field(0, Kneron_NEFContent, magic, flatbuffers_uint32, uint32_t, UINT32_C(19840308))
__flatbuffers_define_table_field(1, Kneron_NEFContent, header, Kneron_NEFHeader_table_t, 0)
__flatbuffers_define_vector_field(2, Kneron_NEFContent, model_info, Kneron_ModelInfo_vec_t, 0)
__flatbuffers_define_table_field(3, Kneron_NEFContent, model_bin, Kneron_ModelBin_table_t, 0)


#include "flatcc/flatcc_epilogue.h"
#endif /* KNERON_NEF_READER_H */
